#@ load("@ytt:data", "data")

#@ if/end "deliverable-flux-kustomization-template" not in data.values.excluded_blueprints:
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: deliverable-flux-kustomization-template
  annotations:
    doc: |
      Generates a deliverable resource for the current Workload as a Flux Kustomization
      and returns it via a ConfigMap as a "deliverable" property.
spec:
  params:
    - name: gitCredentialsSecret
      default: ""
    - name: gitops
      default: {}
    - name: registry
      default: {}
    - name: registryCredentialsSecret
      default: ""
    - name: serviceAccount
      default: default

  configPath: .data

  healthRule:
    alwaysHealthy: {}

  ytt: |
    #@ load("@ytt:assert", "assert")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def oci_bundle():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "bundle",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    #@ def is_gitops_enabled():
    #@   if param("gitops")["strategy"] == "none":
    #@     return False
    #@   end
    #@   if 'server_address' in param("gitops") or 'repository.owner' in param("gitops") or 'repository.name' in param("gitops"):
    #@     'server_address' in param("gitops") or assert.fail("missing param: gitops.server_address")
    #@     'owner' in param("gitops")["repository"] or assert.fail("missing param: gitops.repository.owner")
    #@     'name' in param("gitops")["repository"] or assert.fail("missing param: gitops.repository.name")
    #@   end
    #@   return True
    #@ end

    #@ def strip_trailing_slash(some_string):
    #@   if some_string[-1] == "/":
    #@     return some_string[:-1]
    #@   end
    #@   return some_string
    #@ end

    #@ def git_repository():
    #@   strip_trailing_slash(data.values.params.gitops.server_address)
    #@   return "/".join([
    #@     strip_trailing_slash(data.values.params.gitops.server_address),
    #@     strip_trailing_slash(data.values.params.gitops.repository.owner),
    #@     data.values.params.gitops.repository.name,
    #@   ]) + ".git"
    #@ end
    
    #@ def deliverable():
    ---
    apiVersion: source.toolkit.fluxcd.io/v1
    kind: GitRepository
    metadata:
      name: #@ data.values.workload.metadata.name + "-config"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "source" })
    spec:
      interval: 1m0s
      url: #@ git_repository()
      ref:
        branch: #@ param("gitops")["target_branch"]
      #@ if param("gitCredentialsSecret"):
      secretRef:
        name: #@ param("gitCredentialsSecret")
      #@ end
    
    ---
    apiVersion: kustomize.toolkit.fluxcd.io/v1
    kind: Kustomization
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deploy" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      interval: 1m0s
      sourceRef:
        kind: GitRepository
        name: #@ data.values.workload.metadata.name + "-config"
      path: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
      prune: true
      wait: true
      timeout: 1m0s
      targetNamespace: #@ data.values.workload.metadata.namespace
    #@ end
    
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name + "-deliverable"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deliverable" })
    data:
      deliverable: #@ yaml.encode(deliverable())

#@ load("@ytt:data", "data")

#@ if/end "tekton-write-config-and-pr-template" not in data.values.excluded_blueprints:
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: tekton-write-config-and-pr-template
  annotations:
    doc: |
      Consumes an application deployment configuration and executes the configured Tekton
      task on every detected input change to push the configuration to a new branch and open a
      pull request to be merged manually.
spec:
  params:
    - name: gitops
      default: {}
    - name: pipelineCatalogNamespace
      default: #@ data.values.tekton_catalog_namespace
    - name: serviceAccount
      default: default

  lifecycle: tekton

  ytt: |
    #@ load("@ytt:base64", "base64")
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    ---
    apiVersion: tekton.dev/v1
    kind: TaskRun
    metadata:
      generateName: #@ data.values.workload.metadata.name + "-config-writer-pull-requester-"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config-writer-pull-requester" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount

      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: git-write-config-and-pr
        - name: namespace
          value: #@ data.values.params.pipelineCatalogNamespace

      params:
        - name: git_server_address
          value: #@ data.values.params.gitops.server_address
        - name: repository_owner
          value: #@ data.values.params.gitops.repository.owner
        - name: repository_name
          value: #@ data.values.params.gitops.repository.name
        - name: base_branch
          value: #@ param("gitops")["target_branch"]
        - name: git_user_name
          value: #@ param("gitops")["user"]["name"]
        - name: git_user_email
          value: #@ param("gitops")["user"]["email"]
        - name: git_commit_message
          value: #@ param("gitops")["commit"]["message"]
        - name: git_files
          value: #@ base64.encode(json.encode(data.values.config))
        - name: sub_path
          value: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
        - name: git_server_kind
          value: #@ data.values.params.gitops.pull_request.server_kind
        - name: commit_branch
          value: #@ data.values.params.gitops.pull_request.commit_branch
        - name: pull_request_title
          value: #@ data.values.params.gitops.pull_request.title
        - name: pull_request_body
          value: #@ data.values.params.gitops.pull_request.body

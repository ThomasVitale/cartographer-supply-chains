#@ load("@ytt:data", "data")

#@ if/end "tekton-test-source-template" not in data.values.excluded_blueprints:
---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: tekton-test-source-template
  annotations:
    doc: |
      Consumes an application source repository and executes the configured Tekton
      testing pipeline on every detected input change.
spec:
  params:
    - name: pipelineName
      default: ""
    - name: pipelineCatalogNamespace
      default: #@ data.values.tekton_catalog_namespace
    - name: serviceAccount
      default: default

  urlPath: .status.pipelineSpec.tasks[0].params[0].value
  revisionPath: .status.pipelineSpec.tasks[0].params[1].value
  
  lifecycle: tekton
  
  ytt: |
    #@ load("@ytt:assert", "assert")
    #@ load("@ytt:data", "data")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def get_app_language():
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     if data.values.workload.metadata.labels["app.kadras.io/language"]:
    #@       return data.values.workload.metadata.labels["app.kadras.io/language"]
    #@     end
    #@   end
    #@   return ""
    #@ end

    ---
    apiVersion: tekton.dev/v1
    kind: PipelineRun
    metadata:
      generateName: #@ data.values.workload.metadata.name + "-test-"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "test" })
    spec:
      #@ if data.values.params.pipelineName != "":
      pipelineRef:
        name: #@ data.values.params.pipelineName
      #@ elif get_app_language() != "":
      pipelineRef:
        resolver: cluster
        params:
        - name: kind
          value: pipeline
        - name: name
          value: #@ get_app_language() + "-test-pipeline"
        - name: namespace
          value: #@ data.values.params.pipelineCatalogNamespace
      #@ else:
      #@ assert.fail("One between the 'app.kadras.io/language' label and the 'pipelineName' parameter must be not empty.")
      #@ end
      taskRunTemplate:
        serviceAccountName: #@ data.values.params.serviceAccount
      params:
      - name: source-url
        value: #@ data.values.source.url
      - name: source-revision
        value: #@ data.values.source.revision
      - name: source-subpath
        #@ if hasattr(data.values.workload.spec.source, "subPath"):
        value: #@ data.values.workload.spec.source.subPath
        #@ else:
        value: "."
        #@ end
